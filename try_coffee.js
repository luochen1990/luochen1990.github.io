// Generated by CoffeeScript 1.9.1
(function() {
  var filter_empty_item, init_coffee_editor, is_empty_item, storage;

  init_coffee_editor = function(coffee_code_div, js_code_div) {
    var _compile, _eval, _js_code, count_indent, tab;
    $(coffee_code_div).css({
      'tab-size': '4',
      '-moz-tab-size': '4',
      '-o-tab-size': '4'
    });
    _js_code = '';
    _compile = function() {
      _js_code = CoffeeScript.compile($(coffee_code_div).val(), {
        bare: true
      });
      if (js_code_div) {
        $(js_code_div).val(_js_code);
      }
      return null;
    };
    _eval = function() {
      var e;
      try {
        return eval(_js_code);
      } catch (_error) {
        e = _error;
        alert(e);
        throw e;
      }
    };
    $(coffee_code_div).on('run', function() {
      log.histories.splice(0, Infinity);
      _compile();
      return _eval();
    });
    count_indent = function(line, tab) {
      var c, i;
      c = 0;
      i = 0;
      while (i < line.length) {
        if (line.substr(i, tab.length) === tab) {
          c += 1;
          i += tab.length;
        } else {
          break;
        }
      }
      return c;
    };
    tab = '\t';
    $(coffee_code_div).on('keydown', function(e) {
      var after, before, c, cnt, end, i, indent, inserted, j, l, last_line, lines, ref, ref1, ref2, selected, start, text;
      if ((ref = e.keyCode) === 9 || ref === 13 || ref === 8) {
        e.preventDefault();
        text = this.value;
        start = this.selectionStart;
        end = this.selectionEnd;
        if (e.keyCode === 9 && start !== end) {
          while (start - 1 >= 0 && text[start - 1] !== '\n') {
            start -= 1;
          }
        }
        selected = text.slice(start, end);
        before = text.slice(0, start);
        after = text.slice(end);
        if (e.keyCode === 9) {
          if (start === end) {
            this.value = before + tab + after;
            this.selectionStart = this.selectionEnd = start + tab.length;
          } else {
            lines = selected.split('\n');
            cnt = 0;
            if (e.shiftKey) {
              for (i = j = 0, ref1 = lines.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
                if (lines[i].slice(0, tab.length) === tab) {
                  lines[i] = lines[i].slice(tab.length);
                  cnt -= tab.length;
                }
              }
            } else {
              for (i = l = 0, ref2 = lines.length; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
                lines[i] = tab + lines[i];
                cnt += tab.length;
              }
            }
            selected = lines.join('\n');
            this.value = before + selected + after;
            this.selectionStart = start;
            this.selectionEnd = end + cnt;
          }
        }
        if (e.keyCode === 8) {
          if (start === end) {
            c = before.slice(-tab.length) === tab ? tab.length : 1;
            this.value = before.slice(0, -c) + after;
            this.selectionStart = this.selectionEnd = start - c;
          } else {
            this.value = before + after;
            this.selectionStart = this.selectionEnd = start;
          }
        }
        if (e.keyCode === 13) {
          if (e.shiftKey || e.ctrlKey) {
            return $(coffee_code_div).trigger('run');
          } else {
            if (before.length === 0) {
              this.value = before + '\n' + after;
              return this.selectionStart = this.selectionEnd = start + 1;
            } else {
              lines = before.split('\n');
              last_line = lines[lines.length - 1];
              indent = count_indent(last_line, tab);
              if (/(^\s*(for|while|until|if|unless) )|((\(|\[|\{|[-=]>)$)/.test(last_line)) {
                indent += 1;
              }
              inserted = '\n' + tab.repeat(indent);
              this.value = before + inserted + after;
              return this.selectionStart = this.selectionEnd = start + inserted.length;
            }
          }
        }
      }
    });
    return {
      coffee_code: function(s) {
        if (s != null) {
          return $(coffee_code_div).val(s);
        } else {
          return $(coffee_code_div).val();
        }
      },
      js_code: function() {
        _compile();
        return _js_code;
      }
    };
  };

  storage = {
    read: function() {
      return '';
    },
    write: function() {}
  };

  is_empty_item = function(it) {
    if (it == null) {
      return true;
    }
    if (it instanceof Array && it.length === 0) {
      return true;
    }
    if (typeof it === 'string' && it.length === 0) {
      return true;
    }
    return false;
  };

  filter_empty_item = function(d) {
    var k, r, v;
    r = {};
    for (k in d) {
      v = d[k];
      if (!is_empty_item(v)) {
        r[k] = v;
      }
    }
    return r;
  };

  $(document).ready(function() {
    var data, editor, j, len, ref, url;
    editor = init_coffee_editor('#code-block', '#js-block');
    data = Object.extend(uri_decoder(obj)(location.search), storage.read(), {
      libs: [],
      code: "log -> 'hello, coffee-mate!'"
    });
    console.log('data.libs:', data.libs);
    storage.write(data);
    ref = data.libs;
    for (j = 0, len = ref.length; j < len; j++) {
      url = ref[j];
      $.getScript(url);
    }
    editor.coffee_code(data.code);
    $('#code-block').on('run', function() {
      data.code = editor.coffee_code();
      storage.write(data);
      return $('#output-area').val(log.histories.map(function(xs) {
        return xs.join(' ');
      }).join('\n'));
    });
    $('#run-button').on('click', function() {
      return $('#code-block').trigger('run');
    });
    $('#load-lib-button').on('click', function() {
      url = $('#lib-to-load').val();
      data.libs = data.libs.concat([url]);
      storage.write(data);
      return $.getScript(url);
    });
    $('#get-url').on('click', function() {
      data.code = editor.coffee_code();
      storage.write(data);
      return location.search = uri_encoder(json)(filter_empty_item(data));
    });
    return $('#show-js-button').on('click', function() {
      log(function() {
        return 'AA';
      });
      if ($('#js-block').css('display') === 'none') {
        return $('#js-block').css({
          'display': 'inline-block'
        });
      } else {
        return $('#js-block').css({
          'display': 'none'
        });
      }
    });
  });

}).call(this);

//# sourceMappingURL=try_coffee.js.map
