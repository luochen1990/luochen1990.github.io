// Generated by CoffeeScript 1.7.1
(function() {
  var init_coffee_editor,
    __slice = [].slice;

  window.log = function() {
    var args, ball, expr, f, op, _i, _len, _ref;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    op = (_ref = args.slice(-1)[0]) === 'log' || _ref === 'warn' || _ref === 'error' ? args.pop() : 'log';
    window.logs = window.logs || [];
    ball = [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      f = args[_i];
      if (typeof f === 'function') {
        expr = f.toString().replace(/\s*function\s*\(\s*\)\s*{\s*return\s*([^]*);\s*}/, '$1');
        if (expr.length <= 100) {
          expr = expr.replace(/[\r\n]{1,2}\s*/g, '');
        }
        ball.push("## " + expr + " ==>", f());
      } else {
        ball.push('##', f);
      }
    }
    console[op].apply(console, ball);
    return window.logs.push(ball);
  };

  window.dict = function(pairs) {
    var d, k, v, _i, _len, _ref;
    d = {};
    for (_i = 0, _len = pairs.length; _i < _len; _i++) {
      _ref = pairs[_i], k = _ref[0], v = _ref[1];
      d[k] = v;
    }
    return d;
  };

  window.size = function(obj) {
    return Object.keys(obj).length;
  };

  window.reversed = function(arr) {
    return arr.slice().reverse();
  };

  window.accumulate = function(fruit, nutri, foo) {
    var it, _i, _len;
    for (_i = 0, _len = nutri.length; _i < _len; _i++) {
      it = nutri[_i];
      fruit = foo(fruit, it);
    }
    return fruit;
  };

  window.sum = function(arr) {
    var r, x, _i, _len;
    r = 0;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      x = arr[_i];
      r += x;
    }
    return r;
  };

  window.square = function(n) {
    return n * n;
  };

  window.zip = function(a, b) {
    var i, len, _i, _results;
    len = Math.min(a.length, b.length);
    _results = [];
    for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
      _results.push([a[i], b[i]]);
    }
    return _results;
  };

  window.all = function(arr, f) {
    var x, _i, _len;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      x = arr[_i];
      if (!f(x)) {
        return false;
      }
    }
    return true;
  };

  window.any = function(arr, f) {
    var x, _i, _len;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      x = arr[_i];
      if (f(x)) {
        return true;
      }
    }
    return false;
  };

  window.int = function(s) {
    if (/^-?[0-9]+$/.test(s)) {
      return parseInt(s);
    } else {
      return null;
    }
  };

  window.float = function(s) {
    if (/^-?[0-9]*(\.[0-9]+)?([eE]-?[0-9]+)?$/.test(s)) {
      return parseFloat(s);
    } else {
      return null;
    }
  };

  window.str = function(x) {
    return x + '';
  };

  window.json = function(it) {
    return JSON.stringify(it);
  };

  window.obj = function(s) {
    return JSON.parse(s);
  };

  window.sign = function(x) {
    return (x > 0) - (x < 0);
  };

  String.prototype.format = function(args) {
    return this.replace(/\{(\w+)\}/g, function(m, i) {
      if (args[i] != null) {
        return args[i];
      } else {
        return m;
      }
    });
  };

  String.prototype.repeat = function(n) {
    var i, r, _i;
    r = '';
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      r += this;
    }
    return r;
  };

  window.url_encode = function(obj) {
    var k, v;
    return ((function() {
      var _results;
      _results = [];
      for (k in obj) {
        v = obj[k];
        _results.push("" + (encodeURIComponent(k)) + "=" + (encodeURIComponent(v)));
      }
      return _results;
    })()).join('&');
  };

  window.sleep = function(seconds, callback) {
    return setTimeout(callback, seconds * 1000);
  };

  window.random_gen = function(seed) {
    return function() {
      var x;
      x = Math.sin(seed++) * 10000;
      return x - Math.floor(x);
    };
  };

  window.ranged_random_gen = function(range, seed) {
    var random;
    random = random_gen(seed);
    return function() {
      return Math.floor(random() * range);
    };
  };

  init_coffee_editor = function(coffee_code_div, js_code_div) {
    var count_indent, tab, _compile, _eval, _js_code;
    _js_code = '';
    _compile = function() {
      _js_code = CoffeeScript.compile($(coffee_code_div).val(), {
        bare: true
      });
      if (js_code_div) {
        return $(js_code_div).val(_js_code);
      }
    };
    _eval = function() {
      return eval(_js_code);
    };
    count_indent = function(line, tab) {
      var c, i;
      c = 0;
      i = 0;
      while (i < line.length) {
        if (line.substr(i, tab.length) === tab) {
          c += 1;
          i += tab.length;
        } else {
          break;
        }
      }
      return c;
    };
    tab = ' '.repeat(4);
    $(coffee_code_div).on('keydown', function(e) {
      var after, before, c, cnt, end, i, indent, inserted, last_line, lines, selected, start, text, _i, _j, _ref, _ref1, _ref2;
      if ((_ref = e.keyCode) === 9 || _ref === 13 || _ref === 8) {
        e.preventDefault();
        text = this.value;
        start = this.selectionStart;
        end = this.selectionEnd;
        if (e.keyCode === 9 && start !== end) {
          while (start - 1 >= 0 && text[start - 1] !== '\n') {
            start -= 1;
          }
        }
        selected = text.slice(start, end);
        before = text.slice(0, start);
        after = text.slice(end);
        if (e.keyCode === 9) {
          if (start === end) {
            this.value = before + tab + after;
            this.selectionStart = this.selectionEnd = start + tab.length;
          } else {
            lines = selected.split('\n');
            cnt = 0;
            if (e.shiftKey) {
              for (i = _i = 0, _ref1 = lines.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
                if (lines[i].slice(0, tab.length) === tab) {
                  lines[i] = lines[i].slice(tab.length);
                  cnt -= tab.length;
                }
              }
            } else {
              for (i = _j = 0, _ref2 = lines.length; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
                lines[i] = tab + lines[i];
                cnt += tab.length;
              }
            }
            selected = lines.join('\n');
            this.value = before + selected + after;
            this.selectionStart = start;
            this.selectionEnd = end + cnt;
          }
        }
        if (e.keyCode === 8) {
          if (start === end) {
            c = before.slice(-tab.length) === tab ? tab.length : 1;
            this.value = before.slice(0, -c) + after;
            this.selectionStart = this.selectionEnd = start - c;
          } else {
            this.value = before + after;
            this.selectionStart = this.selectionEnd = start;
          }
        }
        if (e.keyCode === 13) {
          if (e.shiftKey) {
            _compile();
            return _eval();
          } else {
            if (before.length === 0) {
              this.value = before + '\n' + after;
              return this.selectionStart = this.selectionEnd = start + 1;
            } else {
              lines = before.split('\n');
              last_line = lines[lines.length - 1];
              indent = count_indent(last_line, tab);
              inserted = '\n' + tab.repeat(indent);
              this.value = before + inserted + after;
              return this.selectionStart = this.selectionEnd = start + inserted.length;
            }
          }
        }
      }
    });
    return {
      coffee_code: function() {
        return $(coffee_code_div).val();
      },
      js_code: function() {
        _compile();
        return _js_code;
      },
      run: function() {
        _compile();
        return _eval();
      }
    };
  };

  $(document).ready(function() {
    var editor;
    editor = init_coffee_editor('#code-block', '#js-block');
    return $('#run-button').on('click', function() {
      return editor.run();
    });
  });

}).call(this);

//# sourceMappingURL=test.map
