// Generated by CoffeeScript 1.6.3
(function() {
  var anim, best, canvas, cartesian_product, err, height, i, id, img, log, pen, pos_size0, pos_size1, random_gen, ranged_random_gen, square, sum, vec, width, _ref,
    __slice = [].slice;

  sum = function(n) {
    var r, x, _i, _len;
    r = 0;
    for (_i = 0, _len = n.length; _i < _len; _i++) {
      x = n[_i];
      r += x;
    }
    return r;
  };

  square = function(n) {
    return n * n;
  };

  best = function(ls, better) {
    var it, rext, _i, _len;
    rext = null;
    for (_i = 0, _len = ls.length; _i < _len; _i++) {
      it = ls[_i];
      rext = (rext == null) || better(it, rext) ? it : rext;
    }
    return rext;
  };

  cartesian_product = function(la, lb) {
    var r, x, y, _i, _j, _len, _len1;
    r = [];
    for (_i = 0, _len = la.length; _i < _len; _i++) {
      x = la[_i];
      for (_j = 0, _len1 = lb.length; _j < _len1; _j++) {
        y = lb[_j];
        r.push([x, y]);
      }
    }
    return r;
  };

  random_gen = function(seed) {
    return function() {
      var x;
      x = Math.sin(seed++) * 10000;
      return x - Math.floor(x);
    };
  };

  ranged_random_gen = function(range, seed) {
    var random;
    random = random_gen(seed);
    return function() {
      return Math.floor(random() * range);
    };
  };

  vec = {
    zero: [0, 0],
    onex: [1, 0],
    oney: [0, 1],
    add: function(va, vb) {
      return [va[0] + vb[0], va[1] + vb[1]];
    },
    opp: function(v) {
      return [-v[0], -v[1]];
    },
    sub: function(va, vb) {
      return [va[0] - vb[0], va[1] - vb[1]];
    },
    sum: function(vs) {
      var v;
      return [
        sum((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = vs.length; _i < _len; _i++) {
            v = vs[_i];
            _results.push(v[0]);
          }
          return _results;
        })()), sum((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = vs.length; _i < _len; _i++) {
            v = vs[_i];
            _results.push(v[1]);
          }
          return _results;
        })())
      ];
    },
    mul: function(va, k) {
      return [va[0] * k, va[1] * k];
    },
    mul2: function(va, vb) {
      return [va[0] * vb[0], va[1] * vb[1]];
    },
    len: function(v) {
      return Math.sqrt(square(v[0]) + square(v[1]));
    },
    norm: function(v) {
      var len;
      len = Math.sqrt(square(v[0]) + square(v[1]));
      if (len > 1e-8) {
        return [v[0] / len, v[1] / len];
      } else {
        return [0, 0];
      }
    },
    rot: function(v) {
      return [-v[1], v[0]];
    }
  };

  vec.mix = function(va, vb, k) {
    return vec.add(va, vec.mul(vec.sub(vb, va), k));
  };

  log = function(it) {
    return console.log(JSON.stringify(it));
  };

  err = function(it) {
    return alert(JSON.stringify(it));
  };

  pos_size0 = function(frame) {
    var pos, pos0, pos1, size, size0, size1;
    size0 = [280, 420];
    size1 = [320, 480];
    pos0 = [size0[0] * 0.5, 40];
    pos1 = [size0[0], 0];
    if (frame < 50) {
      pos = vec.mix(pos0, pos1, frame / 50);
      size = vec.mix(size0, size1, frame / 50);
      return __slice.call(pos).concat(__slice.call(size));
    } else {
      pos = vec.mix(pos1, pos0, (frame - 50) / 50);
      size = vec.mix(size1, size0, (frame - 50) / 50);
      return __slice.call(pos).concat(__slice.call(size));
    }
  };

  pos_size1 = function(frame) {
    var pos, pos0, pos1, size, size0, size1;
    size0 = [280, 420];
    size1 = [240, 360];
    pos0 = [size0[0] * 0.5, 40];
    pos1 = [0, 80];
    if (frame < 50) {
      pos = vec.mix(pos0, pos1, frame / 50);
      size = vec.mix(size0, size1, frame / 50);
      return __slice.call(pos).concat(__slice.call(size));
    } else {
      pos = vec.mix(pos1, pos0, (frame - 50) / 50);
      size = vec.mix(size1, size0, (frame - 50) / 50);
      return __slice.call(pos).concat(__slice.call(size));
    }
  };

  canvas = document.getElementById('canv');

  _ref = [canvas.width, canvas.height], width = _ref[0], height = _ref[1];

  pen = canvas.getContext("2d");

  img = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 1; _i <= 6; i = ++_i) {
      _results.push(document.getElementById("p" + i));
    }
    return _results;
  })();

  anim = function(img0, img1) {
    window.anim_switch = function(frame) {
      pen.clearRect(0, 0, width, height);
      if (frame < 50) {
        pen.drawImage.apply(pen, [img1].concat(__slice.call(pos_size1(frame))));
        pen.drawImage.apply(pen, [img0].concat(__slice.call(pos_size0(frame))));
      } else {
        pen.drawImage.apply(pen, [img0].concat(__slice.call(pos_size0(frame))));
        pen.drawImage.apply(pen, [img1].concat(__slice.call(pos_size1(frame))));
      }
      frame += 1;
      if (frame < 100) {
        return setTimeout("window.anim_switch(" + (frame + 1) + ")", 20);
      }
    };
    return window.anim_switch(0);
  };

  pen.drawImage.apply(pen, [img[0]].concat(__slice.call(pos_size0(0))));

  id = 0;

  $('#next').click(function() {
    var id2;
    id2 = (id + 1) % img.length;
    anim(img[id], img[id2]);
    return id = id2;
  });

  $('#prev').click(function() {
    var id2;
    id2 = (id + img.length - 1) % img.length;
    anim(img[id], img[id2]);
    return id = id2;
  });

}).call(this);
