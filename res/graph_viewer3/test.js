// Generated by CoffeeScript 1.6.3
(function() {
  var best, canvas, cartesian_product, data, data_gen, draw, dye, dye_style, err, height, iter, layout, layout_iter, layout_style, log, pen, random_gen, ranged_random_gen, simple_draw, simple_dye, simple_layout, simple_layout_iter, square, sum, width, zero_layout_iter, _ref;

  sum = function(n) {
    var r, x, _i, _len;
    r = 0;
    for (_i = 0, _len = n.length; _i < _len; _i++) {
      x = n[_i];
      r += x;
    }
    return r;
  };

  square = function(n) {
    return n * n;
  };

  best = function(ls, better) {
    var it, rext, _i, _len;
    rext = null;
    for (_i = 0, _len = ls.length; _i < _len; _i++) {
      it = ls[_i];
      rext = (rext == null) || better(it, rext) ? it : rext;
    }
    return rext;
  };

  cartesian_product = function(la, lb) {
    var r, x, y, _i, _j, _len, _len1;
    r = [];
    for (_i = 0, _len = la.length; _i < _len; _i++) {
      x = la[_i];
      for (_j = 0, _len1 = lb.length; _j < _len1; _j++) {
        y = lb[_j];
        r.push([x, y]);
      }
    }
    return r;
  };

  random_gen = function(seed) {
    return function() {
      var x;
      x = Math.sin(seed++) * 10000;
      return x - Math.floor(x);
    };
  };

  ranged_random_gen = function(range, seed) {
    var random;
    random = random_gen(seed);
    return function() {
      return Math.floor(random() * range);
    };
  };

  log = function(it) {
    return console.log(JSON.stringify(it));
  };

  err = function(it) {
    return alert(JSON.stringify(it));
  };

  simple_dye = function(data) {
    return function(n) {
      return 'c1';
    };
  };

  simple_layout = function(data, dye, width, height) {
    var i, j, m, n, _i, _j;
    n = Math.ceil(Math.sqrt(data.node.length));
    m = {};
    for (i = _i = 0; 0 <= n ? _i <= n : _i >= n; i = 0 <= n ? ++_i : --_i) {
      for (j = _j = 0; 0 <= n ? _j <= n : _j >= n; j = 0 <= n ? ++_j : --_j) {
        if (i * n + j < data.node.length) {
          m[data.node[i * n + j]] = [(j + 1) / (n + 1) * width, (i + 1) / (n + 1) * height];
        }
      }
    }
    return function(n) {
      return m[n];
    };
  };

  zero_layout_iter = function(data, dye, width, height, layout) {
    return function() {
      return layout;
    };
  };

  simple_layout_iter = function(data, dye, width, height, layout) {
    var Fa, Fl, Fr, adj, e, n, normalize, placer, sparsity, st, vec, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    sparsity = Math.sqrt(width * height / data.node.length) * 0.5;
    adj = {};
    _ref = data.node;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      n = _ref[_i];
      adj[n] = [];
    }
    _ref1 = data.edge;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      e = _ref1[_j];
      adj[e[0]].push(e[1]);
      adj[e[1]].push(e[0]);
    }
    vec = {
      zero: [0, 0],
      onex: [1, 0],
      oney: [0, 1],
      add: function(va, vb) {
        return [va[0] + vb[0], va[1] + vb[1]];
      },
      opp: function(v) {
        return [-v[0], -v[1]];
      },
      sub: function(va, vb) {
        return [va[0] - vb[0], va[1] - vb[1]];
      },
      sum: function(vs) {
        var v;
        return [
          sum((function() {
            var _k, _len2, _results;
            _results = [];
            for (_k = 0, _len2 = vs.length; _k < _len2; _k++) {
              v = vs[_k];
              _results.push(v[0]);
            }
            return _results;
          })()), sum((function() {
            var _k, _len2, _results;
            _results = [];
            for (_k = 0, _len2 = vs.length; _k < _len2; _k++) {
              v = vs[_k];
              _results.push(v[1]);
            }
            return _results;
          })())
        ];
      },
      mul: function(va, k) {
        return [va[0] * k, va[1] * k];
      },
      mul2: function(va, vb) {
        return [va[0] * vb[0], va[1] * vb[1]];
      },
      len: function(v) {
        return Math.sqrt(square(v[0]) + square(v[1]));
      },
      norm: function(v) {
        var len;
        len = Math.sqrt(square(v[0]) + square(v[1]));
        if (len > 1e-8) {
          return [v[0] / len, v[1] / len];
        } else {
          return [0, 0];
        }
      },
      rot: function(v) {
        return [-v[1], v[0]];
      }
    };
    st = {};
    _ref2 = data.node;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      n = _ref2[_k];
      st[n] = {
        a: [0, 0],
        v: [0, 0],
        p: layout(n)
      };
    }
    Fa = function(na, nb) {
      var delta, dir, dis;
      delta = vec.sub(st[nb].p, st[na].p);
      dir = vec.norm(delta);
      dis = vec.len(delta);
      return vec.mul(dir, 0.0005 * Math.pow(Math.max(0, dis - sparsity), 1));
    };
    Fr = function(na, nb) {
      var delta, dir, dis;
      delta = vec.sub(st[na].p, st[nb].p);
      dir = vec.norm(delta);
      dis = vec.len(delta);
      return vec.mul(dir, 0.5 * Math.pow(dis, -1));
    };
    Fl = function(n) {
      var delta, dir, dis;
      delta = st[n].v;
      dir = vec.norm(delta);
      dis = vec.len(delta);
      return vec.mul(vec.opp(dir), 0.001 * sparsity);
    };
    normalize = function(points) {
      var D, L, R, U, better, i, norm1d, normx, normy, p, _ref3, _ref4;
      _ref3 = (function() {
        var _l, _len3, _ref3, _ref4, _results;
        _ref3 = cartesian_product([0, 1], [
          (function(a, b) {
            return a < b;
          }), (function(a, b) {
            return a > b;
          })
        ]);
        _results = [];
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          _ref4 = _ref3[_l], i = _ref4[0], better = _ref4[1];
          _results.push(best((function() {
            var _len4, _m, _results1;
            _results1 = [];
            for (_m = 0, _len4 = points.length; _m < _len4; _m++) {
              p = points[_m];
              _results1.push(p[i]);
            }
            return _results1;
          })(), better));
        }
        return _results;
      })(), L = _ref3[0], R = _ref3[1], U = _ref3[2], D = _ref3[3];
      norm1d = function(lower, upper) {
        return function(x) {
          return (x - lower) / (upper - lower);
        };
      };
      _ref4 = [norm1d(L, R), norm1d(U, D)], normx = _ref4[0], normy = _ref4[1];
      return function(p) {
        return [normx(p[0]), normy(p[1])];
      };
    };
    placer = function(norm) {
      var padding, region;
      padding = vec.mul(vec.norm([width, height]), sparsity);
      region = vec.sub([width, height], vec.mul(padding, 2));
      return function(p) {
        return vec.add(padding, vec.mul2(norm(p), region));
      };
    };
    return function() {
      var fa, fl, fr, na, nb, trans, _l, _len3, _ref3;
      _ref3 = data.node;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        na = _ref3[_l];
        fa = vec.sum((function() {
          var _len4, _m, _ref4, _results;
          _ref4 = adj[na];
          _results = [];
          for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
            nb = _ref4[_m];
            if (nb !== na) {
              _results.push(Fa(na, nb));
            }
          }
          return _results;
        })());
        fr = vec.sum((function() {
          var _len4, _m, _ref4, _results;
          _ref4 = data.node;
          _results = [];
          for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
            nb = _ref4[_m];
            if (nb !== na) {
              _results.push(Fr(na, nb));
            }
          }
          return _results;
        })());
        fl = Fl(na);
        st[na].a = vec.sum([fa, fr, fl]);
        st[na].v = vec.add(st[na].v, st[na].a);
        st[na].p = vec.add(st[na].p, st[na].v);
      }
      trans = placer(normalize((function() {
        var _len4, _m, _ref4, _results;
        _ref4 = data.node;
        _results = [];
        for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
          n = _ref4[_m];
          _results.push(st[n].p);
        }
        return _results;
      })()));
      return function(n) {
        return trans(st[n].p);
      };
    };
  };

  simple_draw = function(data, layout, dye, width, height, pen) {
    var draw_edge, draw_node, e, n, radius, _i, _j, _len, _len1, _ref, _ref1, _results;
    radius = Math.sqrt(width * height / data.node.length) * 0.15;
    pen.fillStyle = "#FF0000";
    pen.strokeStyle = "#FF2000";
    draw_node = function(node) {
      var p;
      p = layout(node);
      pen.beginPath();
      pen.arc(p[0], p[1], radius, 0, Math.PI * 2, true);
      pen.closePath();
      return pen.fill();
    };
    draw_edge = function(edge) {
      var s, t, _ref;
      _ref = [layout(edge[0]), layout(edge[1])], s = _ref[0], t = _ref[1];
      pen.beginPath();
      pen.moveTo(s[0], s[1]);
      pen.lineTo(t[0], t[1]);
      pen.closePath();
      return pen.stroke();
    };
    _ref = data.node;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      n = _ref[_i];
      draw_node(n);
    }
    _ref1 = data.edge;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      e = _ref1[_j];
      _results.push(draw_edge(e));
    }
    return _results;
  };

  data_gen = function(random_seed, density) {
    var edge, i, j, random, v, x, _i, _j, _ref;
    random = random_gen(random_seed);
    v = 1 + Math.floor(random() * 30);
    edge = [];
    for (i = _i = 1; 1 <= v ? _i <= v : _i >= v; i = 1 <= v ? ++_i : --_i) {
      for (j = _j = _ref = i + 1; _ref <= v ? _j <= v : _j >= v; j = _ref <= v ? ++_j : --_j) {
        if (Math.floor(random() * v) < (Math.log(v) / Math.LN2) * density) {
          edge.push([i, j]);
        }
      }
    }
    return {
      node: (function() {
        var _k, _results;
        _results = [];
        for (x = _k = 1; 1 <= v ? _k <= v : _k >= v; x = 1 <= v ? ++_k : --_k) {
          _results.push(x);
        }
        return _results;
      })(),
      edge: edge
    };
  };

  data = data_gen(7, 0.1);

  log(data.node.length);

  log(data.edge.length);

  canvas = document.getElementById('canv');

  _ref = [canvas.width, canvas.height], width = _ref[0], height = _ref[1];

  pen = canvas.getContext("2d");

  dye_style = simple_dye;

  layout_style = simple_layout;

  layout_iter = simple_layout_iter;

  draw = simple_draw;

  if (typeof dye === "undefined" || dye === null) {
    dye = dye_style(data);
  }

  if (typeof layout === "undefined" || layout === null) {
    layout = layout_style(data, dye, width, height);
  }

  draw(data, layout, dye, width, height, pen);

  if (layout_iter != null) {
    iter = layout_iter(data, dye, width, height, layout);
    window.redraw = function() {
      layout = iter();
      pen.clearRect(0, 0, width, height);
      return draw(data, layout, dye, width, height, pen);
    };
    setInterval("redraw()", 20);
  }

  window.graph = {
    data: data,
    layout: layout,
    dye: dye
  };

}).call(this);
